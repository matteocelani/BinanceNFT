import * as React from 'react';
import { StyledComponentProps } from '@material-ui/core/styles';
/**
 * TODO import from the v5 directly
 *
 * Remove properties `K` from `T`.
 * Distributive for union types.
 *
 * @internal
 */
export declare type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;
/**
 * TODO import from the core v5 directly
 *
 * @private ONLY USE FROM WITHIN mui-org/material-ui
 *
 * Internal helper type for conform (describeConformance) components
 * However, we don't declare classes on this type.
 * It is recommended to declare them manually with an interface so that each class can have a separate JSDOC.
 */
export declare type InternalStandardProps<C, Removals extends keyof C = never> = DistributiveOmit<C, 'classes' | Removals> & StyledComponentProps<never> & {
    ref?: C extends {
        ref?: infer RefType;
    } ? RefType : React.Ref<unknown>;
    className?: string;
    style?: React.CSSProperties;
};
export declare function useEventCallback<T extends (...args: any[]) => any>(func: T): T;
export declare const useEnhancedEffect: typeof React.useLayoutEffect;
export declare function useThemeProps({ props: inputProps, name }: {
    props: any;
    name: any;
}): any;
export declare function composeClasses<ClassKey extends string>(slots: Record<ClassKey, ReadonlyArray<string | false | undefined | null>>, getUtilityClass: (slot: string) => string, classes: Record<string, string> | undefined): Record<ClassKey, string>;
export declare function generateUtilityClass(componentName: string, slot: string): string;
export declare function generateUtilityClasses<T extends string>(componentName: string, slots: T[]): Record<T, string>;
