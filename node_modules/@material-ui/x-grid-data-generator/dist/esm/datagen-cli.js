import{_ as t,b as e,g as i,a as o}from"./_tslib-713cb3ee.js";import*as r from"fs";import*as a from"yargs";import"react";import"@material-ui/core/Avatar";import"chance";import"@material-ui/core/colors";import"@material-ui/styles";import"@material-ui/core/Tooltip";import"@material-ui/icons/Info";import"clsx";import"@material-ui/core/styles";import"@material-ui/core/utils";import"@material-ui/lab/Rating";import"@material-ui/icons/ReportProblem";import"@material-ui/icons/Autorenew";import"@material-ui/icons/Done";import"@material-ui/core/Chip";import"@material-ui/lab/Autocomplete";import"@material-ui/core/InputBase";import"@material-ui/core/Slider";import"@material-ui/core/Select";import"@material-ui/core/MenuItem";import"@material-ui/core/ListItemIcon";import"@material-ui/core/ListItemText";function m(){a.command({command:"$0",describe:"Generates Component.propTypes from TypeScript declarations",builder:t=>t.option("dataset",{default:"",describe:'A dataset can be "commodity" | "employee"',type:"string"}).option("output",{default:"",describe:'The output file, if not passed, it will generate "./<dataset>-<size>.json"',type:"string"}).option("pretty",{default:!1,describe:"Print a prettier output",type:"boolean"}).option("size",{default:"1000",describe:"The number of rows to generate",type:"string"}),handler:a=>{var m,s;console.log(`Generating new ${a.dataset} dataset with ${Number(a.size).toLocaleString()} rows`),(m=Number(a.size),s=a.dataset,t(void 0,void 0,void 0,(function*(){return(yield e(Number(m),"commodity"===s.toLowerCase()?i():o())).rows}))).then((t=>{const e=a.output?a.output:`./${a.dataset}-${a.size}.json`;console.log(`Saving generated dataset in ${e}`),r.writeFileSync(e,JSON.stringify(t,null,a.pretty?2:void 0))}))}}).help().strict(!0).version(!1).parse()}export{m as datagenCli};
