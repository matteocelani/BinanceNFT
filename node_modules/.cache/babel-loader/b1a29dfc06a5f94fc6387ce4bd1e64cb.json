{"ast":null,"code":"var _jsxFileName = \"/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"id\",\n  type: \"number\",\n  headerName: \"ID\",\n  width: 100,\n  editable: false\n}, {\n  field: \"title\",\n  headerName: \"Name\",\n  type: \"number\",\n  width: 250,\n  editable: false\n}, {\n  field: \"amount\",\n  type: \"number\",\n  headerName: \"Prize\",\n  width: 150,\n  sort: \"asc\",\n  editable: false\n}, {\n  field: \"currency\",\n  headerName: \"Coin\",\n  width: 150,\n  editable: false\n}, {\n  field: \"tradeType\",\n  headerName: \"Asta\",\n  type: \"number\",\n  width: 150,\n  editable: false\n}];\nexport default function App(data) {\n  console.log(data);\n  const rows = data.data.items.map(row => {\n    const {\n      productId,\n      ...rest\n    } = row;\n    return {\n      id: productId,\n      ...rest\n    };\n  });\n\n  if (data.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", data.error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  } else if (!data.isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 1000,\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns // ortModel={sortModel}\n        // onSortModelChange={(model) => setSortModel(model)}\n        ,\n        id: \"productId\",\n        pageSize: 100,\n        density: \"compact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this);\n  }\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js"],"names":["React","DataGrid","columns","field","type","headerName","width","editable","sort","App","data","console","log","rows","items","map","row","productId","rest","id","error","message","isLoaded","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,UAAU,EAAE,IAHd;AAIEC,EAAAA,KAAK,EAAE,GAJT;AAKEC,EAAAA,QAAQ,EAAE;AALZ,CADc,EAQd;AACEJ,EAAAA,KAAK,EAAE,OADT;AAEEE,EAAAA,UAAU,EAAE,MAFd;AAGED,EAAAA,IAAI,EAAE,QAHR;AAIEE,EAAAA,KAAK,EAAE,GAJT;AAKEC,EAAAA,QAAQ,EAAE;AALZ,CARc,EAed;AACEJ,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,UAAU,EAAE,OAHd;AAIEC,EAAAA,KAAK,EAAE,GAJT;AAKEE,EAAAA,IAAI,EAAE,KALR;AAMED,EAAAA,QAAQ,EAAE;AANZ,CAfc,EAuBd;AACEJ,EAAAA,KAAK,EAAE,UADT;AAEEE,EAAAA,UAAU,EAAE,MAFd;AAGEC,EAAAA,KAAK,EAAE,GAHT;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAvBc,EA6Bd;AACEJ,EAAAA,KAAK,EAAE,WADT;AAEEE,EAAAA,UAAU,EAAE,MAFd;AAGED,EAAAA,IAAI,EAAE,QAHR;AAIEE,EAAAA,KAAK,EAAE,GAJT;AAKEC,EAAAA,QAAQ,EAAE;AALZ,CA7Bc,CAAhB;AAsCE,eAAe,SAASE,GAAT,CAAaC,IAAb,EAAmB;AAE9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAMG,IAAI,GAAGH,IAAI,CAACA,IAAL,CAAUI,KAAV,CAAgBC,GAAhB,CAAqBC,GAAD,IAAS;AACxC,UAAM;AAAEC,MAAAA,SAAF;AAAa,SAAGC;AAAhB,QAAyBF,GAA/B;AACA,WAAO;AAAEG,MAAAA,EAAE,EAAEF,SAAN;AAAiB,SAAGC;AAApB,KAAP;AACD,GAHY,CAAb;;AAKA,MAAIR,IAAI,CAACU,KAAT,EAAgB;AACd,wBAAO;AAAA,4BAAaV,IAAI,CAACU,KAAL,CAAWC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACX,IAAI,CAACY,QAAV,EAAoB;AACzB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,IAAV;AAAgBjB,QAAAA,KAAK,EAAE;AAAvB,OAAZ;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,IAAI,EAAEO,IADR;AAEE,QAAA,OAAO,EAAEX,OAFX,CAGE;AACA;AAJF;AAKE,QAAA,EAAE,EAAC,WALL;AAME,QAAA,QAAQ,EAAE,GANZ;AAOE,QAAA,OAAO,EAAC;AAPV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;AACJ;KA3BuBO,G","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst columns = [\n  {\n    field: \"id\",\n    type: \"number\",\n    headerName: \"ID\",\n    width: 100,\n    editable: false\n  },\n  {\n    field: \"title\",\n    headerName: \"Name\",\n    type: \"number\",\n    width: 250,\n    editable: false\n  },\n  {\n    field: \"amount\",\n    type: \"number\",\n    headerName: \"Prize\",\n    width: 150,\n    sort: \"asc\",\n    editable: false\n  },\n  {\n    field: \"currency\",\n    headerName: \"Coin\",\n    width: 150,\n    editable: false\n  },\n  {\n    field: \"tradeType\",\n    headerName: \"Asta\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }\n];\n\n  export default function App(data) {\n\n      console.log(data)\n      const rows = data.data.items.map((row) => {\n        const { productId, ...rest } = row;\n        return { id: productId, ...rest };\n      });\n\n      if (data.error) {\n        return <div>Error: {data.error.message}</div>;\n      } else if (!data.isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div style={{ height: 1000, width: \"100%\" }}>\n            <DataGrid\n              rows={rows}\n              columns={columns}\n              // ortModel={sortModel}\n              // onSortModelChange={(model) => setSortModel(model)}\n              id=\"productId\"\n              pageSize={100}\n              density=\"compact\"\n            />\n          </div>\n        );\n      }\n  }"]},"metadata":{},"sourceType":"module"}