{"ast":null,"code":"/* eslint-disable no-use-before-define */\nimport warning from 'warning';\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? warning(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/Users/matteocelani/Desktop/NFT/ordern-nft/node_modules/@material-ui/core/esm/styles/colorManipulator.js"],"names":["warning","clamp","value","min","arguments","length","undefined","max","process","env","NODE_ENV","concat","hexToRgb","color","substr","re","RegExp","colors","match","map","n","parseInt","join","intToHex","int","hex","toString","rgbToHex","indexOf","_decomposeColor","decomposeColor","values","hslToRgb","_color","h","s","l","a","Math","f","k","type","rgb","round","push","recomposeColor","charAt","marker","substring","Error","split","parseFloat","i","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","pow","Number","toFixed","emphasize","coefficient","darken","lighten","fade"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport warning from 'warning';\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? warning(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"]},"metadata":{},"sourceType":"module"}