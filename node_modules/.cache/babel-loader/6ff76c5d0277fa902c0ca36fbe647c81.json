{"ast":null,"code":"var _jsxFileName = \"/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App(data) {\n  _s();\n\n  const columns = [{\n    field: \"id\",\n    type: \"number\",\n    headerName: \"ID\",\n    width: 100,\n    editable: false\n  }, {\n    field: \"title\",\n    headerName: \"Name\",\n    width: 250,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Link, {\n      href: params.url,\n      children: params.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this),\n    editable: false\n  }, {\n    field: \"amount\",\n    headerName: \"Price\",\n    type: \"number\",\n    width: 115,\n    editable: false\n  }, {\n    field: \"currency\",\n    headerName: \"Coin\",\n    width: 120,\n    editable: false\n  }, {\n    field: \"tradeType\",\n    headerName: \"Trade Type\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }, {\n    field: \"url\",\n    headerName: \"URL\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }];\n  const rows = data.data.items.map(row => {\n    const {\n      productId,\n      ...rest\n    } = row;\n    return {\n      id: productId,\n      ...rest\n    };\n  });\n  console.log(rows);\n  const finalRows = [];\n\n  for (var i = 0; i < rows.length; i++) {\n    if (rows[i].tradeType === 1) {\n      finalRows[i] = {\n        id: rows[i].id,\n        title: rows[i].title,\n        amount: rows[i].amount,\n        currency: rows[i].currency,\n        tradeType: \"Buy Now\",\n        url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n      };\n    } else {\n      finalRows[i] = {\n        id: rows[i].id,\n        title: rows[i].title,\n        amount: rows[i].amount,\n        currency: rows[i].currency,\n        tradeType: \"At auction\",\n        url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n      };\n    }\n  }\n\n  const [sortModel, setSortModel] = React.useState([{\n    field: 'amount',\n    sort: 'asc'\n  }]);\n\n  if (data.data.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", data.data.error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  } else if (!data.data.isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 1200,\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: finalRows,\n        columns: columns,\n        sortModel: sortModel,\n        onSortModelChange: model => setSortModel(model),\n        pageSize: 100,\n        density: \"compact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"Kj8dwyDUnVWd/nL8iXpFl+NtvDk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js"],"names":["React","DataGrid","App","data","columns","field","type","headerName","width","editable","renderCell","params","url","name","rows","items","map","row","productId","rest","id","console","log","finalRows","i","length","tradeType","title","amount","currency","sortModel","setSortModel","useState","sort","error","message","isLoaded","height","model"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nexport default function App(data) {\n\n  const columns = [\n    {\n      field: \"id\",\n      type: \"number\",\n      headerName: \"ID\",\n      width: 100,\n      editable: false\n    },\n    {\n      field: \"title\",\n      headerName: \"Name\",\n      width: 250,\n      renderCell: (params) => (\n        <Link href={params.url}>{params.name}</Link>),\n      editable: false\n    },\n    {\n      field: \"amount\",\n      headerName: \"Price\",\n      type: \"number\",\n      width: 115,\n      editable: false\n    },\n    {\n      field: \"currency\",\n      headerName: \"Coin\",\n      width: 120,\n      editable: false\n    },\n    {\n      field: \"tradeType\",\n      headerName: \"Trade Type\",\n      type: \"number\",\n      width: 150,\n      editable: false\n    },\n    {\n      field: \"url\",\n      headerName: \"URL\",\n      type: \"number\",\n      width: 150,\n      editable: false\n    }\n  ];\n\n  const rows = data.data.items.map((row) => {\n    const { productId, ...rest } = row;\n    return { id: productId, ...rest };\n  });\n\n  console.log(rows)\n  const finalRows = [];\n  for (var i = 0; i < rows.length; i++) {\n    if (rows[i].tradeType === 1) {\n      finalRows[i] =   \n      {\n        id: rows[i].id,\n        title: rows[i].title,\n        amount: rows[i].amount,\n        currency: rows[i].currency,\n        tradeType: \"Buy Now\",\n        url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n      }\n    } else {\n      finalRows[i] =   \n      {\n        id: rows[i].id,\n        title: rows[i].title,\n        amount: rows[i].amount,\n        currency: rows[i].currency,\n        tradeType: \"At auction\",\n        url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n      }\n    }\n  } \n\n  const [sortModel, setSortModel] = React.useState([\n    {\n      field: 'amount',\n      sort: 'asc',\n    },\n  ]);\n\n  if (data.data.error) {\n    return <div>Error: {data.data.error.message}</div>;\n  } else if (!data.data.isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div style={{ height: 1200, width: \"100%\" }}>\n        <DataGrid\n          rows={finalRows}\n          columns={columns}\n          sortModel={sortModel}\n          onSortModelChange={(model) => setSortModel(model)}\n          pageSize={100}\n          density=\"compact\"\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}