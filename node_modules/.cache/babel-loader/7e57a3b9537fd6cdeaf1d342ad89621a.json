{"ast":null,"code":"var _jsxFileName = \"/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Link from '@material-ui/core/Link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App(data) {\n  function convertMiliseconds(endTime) {\n    var date = new Date();\n    var today = date.getTime();\n    var miliseconds = endTime - today;\n    var days, hours, minutes, seconds, total_hours, total_minutes, total_seconds;\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\n    total_hours = parseInt(Math.floor(total_minutes / 60));\n    days = parseInt(Math.floor(total_hours / 24));\n    seconds = parseInt(total_seconds % 60);\n    minutes = parseInt(total_minutes % 60);\n    hours = parseInt(total_hours % 24);\n    return days + \"d :\" + hours + \"h :\" + minutes + \"m :\" + seconds + \"s\";\n  }\n\n  ;\n\n  function tableBuyNow(rows, finalRows, coins) {\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 0) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        }\n      }\n    }\n\n    return finalRows;\n  }\n\n  function tableAuction(rows, finalRows, coins) {\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 1) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        }\n      }\n    }\n\n    return finalRows;\n  }\n\n  function tableFull(rows, finalRows, coins) {\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 0) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        }\n      } else {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        }\n      }\n    }\n\n    return finalRows;\n  }\n\n  function createTable(rows, finalRows, coins, filter) {\n    switch (filter) {\n      case 0:\n        return tableBuyNow(rows, finalRows, coins);\n\n      case 1:\n        return tableAuction(rows, finalRows, coins);\n\n      default:\n        return tableFull(rows, finalRows, coins);\n    }\n  }\n\n  const columns = [{\n    field: \"id\",\n    type: \"number\",\n    headerName: \"ID\",\n    width: 100,\n    editable: false\n  }, {\n    field: \"title\",\n    headerName: \"Name\",\n    width: 250,\n    editable: false\n  }, {\n    field: \"amount\",\n    headerName: \"Price\",\n    type: \"number\",\n    width: 115,\n    editable: false\n  }, {\n    field: \"currency\",\n    headerName: \"Coin\",\n    width: 120,\n    editable: false\n  }, {\n    field: \"usd\",\n    headerName: \"Price USD\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }, {\n    field: \"tradeType\",\n    headerName: \"Trade Type\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }, {\n    field: \"endTime\",\n    headerName: \"End Time\",\n    width: 200,\n    editable: false\n  }, {\n    field: \"url\",\n    headerName: \"URL\",\n    width: 300,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Link, {\n      target: \"_blank\",\n      href: params.value,\n      children: params.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this),\n    editable: false\n  }];\n\n  if (data.data.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", data.data.error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 12\n    }, this);\n  } else if (!data.data.isLoaded && !data.data.coinsLoad) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 12\n    }, this);\n  } else {\n    const rows = data.data.items.map(row => {\n      const {\n        productId,\n        ...rest\n      } = row;\n      return {\n        id: productId,\n        ...rest\n      };\n    });\n    const coins = [data.data.coins.data];\n    const finalRows = [];\n    const filter = data.data.filterTrade;\n    createTable(rows, finalRows, coins, filter);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 850,\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: finalRows,\n        columns: columns,\n        rowsPerPageOptions: [100, 250, 500],\n        pageSize: 100,\n        density: \"compact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this);\n  }\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js"],"names":["React","DataGrid","Link","App","data","convertMiliseconds","endTime","date","Date","today","getTime","miliseconds","days","hours","minutes","seconds","total_hours","total_minutes","total_seconds","parseInt","Math","floor","tableBuyNow","rows","finalRows","coins","i","length","tradeType","currency","id","title","usd","amount","setEndTime","url","binancecoin","ethereum","tableAuction","tableFull","createTable","filter","columns","field","type","headerName","width","editable","renderCell","params","value","error","message","isLoaded","coinsLoad","items","map","row","productId","rest","filterTrade","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Link from '@material-ui/core/Link';\n\nexport default function App(data) {\n\n  function convertMiliseconds(endTime) {\n    var date = new Date();\n    var today = date.getTime();\n    var miliseconds = endTime-today;\n    var days, hours, minutes, seconds, total_hours, total_minutes, total_seconds;\n\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\n    total_hours = parseInt(Math.floor(total_minutes / 60));\n    days = parseInt(Math.floor(total_hours / 24));\n\n    seconds = parseInt(total_seconds % 60);\n    minutes = parseInt(total_minutes % 60);\n    hours = parseInt(total_hours % 24);\n\n    return days + \"d :\" + hours + \"h :\" + minutes + \"m :\" + seconds + \"s\";\n  };\n\n  function tableBuyNow(rows, finalRows, coins) {\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 0) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        }\n      }\n    }\n    return finalRows;\n  }\n\n  function tableAuction(rows, finalRows, coins) {\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 1) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        }\n      }\n    }\n    return finalRows;\n  }\n\n  function tableFull(rows, finalRows, coins) {\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 0) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        }\n      } else {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] =\n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          }\n        }\n      }\n    }\n\n    return finalRows;\n  }\n\n\n  function createTable(rows, finalRows, coins, filter) {\n    switch (filter) {\n      case 0:\n        return tableBuyNow(rows, finalRows, coins)\n      case 1:\n        return tableAuction(rows, finalRows, coins)\n      default:\n        return tableFull(rows, finalRows, coins)\n    }\n  }\n\n  const columns = [\n    {\n      field: \"id\",\n      type: \"number\",\n      headerName: \"ID\",\n      width: 100,\n      editable: false\n    },\n    {\n      field: \"title\",\n      headerName: \"Name\",\n      width: 250,\n      editable: false\n    },\n    {\n      field: \"amount\",\n      headerName: \"Price\",\n      type: \"number\",\n      width: 115,\n      editable: false\n    },\n    {\n      field: \"currency\",\n      headerName: \"Coin\",\n      width: 120,\n      editable: false\n    },\n    {\n      field: \"usd\",\n      headerName: \"Price USD\",\n      type: \"number\",\n      width: 150,\n      editable: false\n    },\n    {\n      field: \"tradeType\",\n      headerName: \"Trade Type\",\n      type: \"number\",\n      width: 150,\n      editable: false\n    },\n    {\n      field: \"endTime\",\n      headerName: \"End Time\",\n      width: 200,\n      editable: false\n    },\n    {\n      field: \"url\",\n      headerName: \"URL\",\n      width: 300,\n      renderCell: (params) => (\n        <Link target=\"_blank\" href={params.value}>{params.value}</Link>),\n      editable: false\n    }\n  ];\n\n  if (data.data.error) {\n    return <div>Error: {data.data.error.message}</div>;\n  } else if (!data.data.isLoaded && !data.data.coinsLoad) {\n    return <div>Loading...</div>;\n  } else {\n    const rows = data.data.items.map((row) => {\n      const { productId, ...rest } = row;\n      return { id: productId, ...rest };\n    });\n    const coins = [data.data.coins.data]\n    const finalRows = [];\n    const filter = data.data.filterTrade\n    createTable(rows, finalRows, coins, filter)\n\n    return (\n      <div style={{ height: 850, width: \"100%\" }}>\n        <DataGrid\n          rows={finalRows}\n          columns={columns}\n          rowsPerPageOptions={[100, 250, 500]}\n          pageSize={100}\n          density=\"compact\"\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}