{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].substr(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/Users/matteocelani/Desktop/NFT/ordern-nft/node_modules/@material-ui/system/esm/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","substr","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","values","decomposeColor","i","hslToRgb","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","Error","colorSpace","split","shift","parseFloat","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","Number","toFixed","emphasize","coefficient","darken","lighten","alpha"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].substr(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"]},"metadata":{},"sourceType":"module"}