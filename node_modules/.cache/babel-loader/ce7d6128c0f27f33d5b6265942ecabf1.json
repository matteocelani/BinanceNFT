{"ast":null,"code":"var _jsxFileName = \"/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"id\",\n  type: \"number\",\n  headerName: \"ID\",\n  width: 100,\n  editable: false\n}, {\n  field: \"amount\",\n  type: \"number\",\n  headerName: \"Prezzo\",\n  width: 150,\n  editable: false\n}, {\n  field: \"currency\",\n  headerName: \"Valuta\",\n  width: 150,\n  editable: false\n}, {\n  field: \"title\",\n  headerName: \"Nome\",\n  type: \"number\",\n  width: 250,\n  editable: false\n}, {\n  field: \"tradeType\",\n  headerName: \"Asta\",\n  type: \"number\",\n  width: 150,\n  editable: false\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.binance.com/bapi/nft/v1/public/nft/product-list\", {\n      \"headers\": {\n        \"accept\": \"*/*\",\n        \"accept-language\": \"it-IT,it;q=0.9,en-US;q=0.8,en;q=0.7\",\n        \"clienttype\": \"web\",\n        \"content-type\": \"application/json\",\n        \"lang\": \"en\",\n        \"sec-fetch-dest\": \"empty\",\n        \"sec-fetch-mode\": \"cors\",\n        \"sec-fetch-site\": \"same-origin\"\n      },\n      \"referrer\": \"https://www.binance.com/en/nft/market\",\n      \"referrerPolicy\": \"origin-when-cross-origin\",\n      \"body\": \"{\\\"category\\\":0,\\\"keyword\\\":\\\"Flamingarlla Flamingos (Unique)\\\",\\\"orderBy\\\":\\\"list_time\\\",\\\"orderType\\\":-1,\\\"page\\\":1,\\\"rows\\\":100}\",\n      \"method\": \"POST\",\n      \"mode\": \"cors\"\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.data.rows\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n    /*  this.setState(prevState => ({\n        ...prevState,\n        items : {\n          ...prevState.items,\n          coverUrl : \"https://www.binance.com/\"\n        }\n    }))\n    console.log(this.state); */\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n    const rows = items.map(row => {\n      const {\n        productId,\n        ...rest\n      } = row;\n      return {\n        id: productId,\n        ...rest\n      };\n    });\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 14\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 1000,\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns,\n          id: \"productId\",\n          pageSize: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport { App };","map":{"version":3,"sources":["/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js"],"names":["React","DataGrid","columns","field","type","headerName","width","editable","App","Component","constructor","props","state","error","isLoaded","items","componentDidMount","fetch","then","res","json","result","setState","data","rows","render","map","row","productId","rest","id","message","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst columns = [\n  { field: \"id\",\n    type: \"number\", \n    headerName: \"ID\", \n    width: 100,\n    editable: false\n  },\n  {\n    field: \"amount\",\n    type: \"number\",\n    headerName: \"Prezzo\",\n    width: 150,\n    editable: false\n  },\n  {\n    field: \"currency\",\n    headerName: \"Valuta\",\n    width: 150,\n    editable: false\n  },\n  {\n    field: \"title\",\n    headerName: \"Nome\",\n    type: \"number\",\n    width: 250,\n    editable: false\n  },\n  {\n    field: \"tradeType\",\n    headerName: \"Asta\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.binance.com/bapi/nft/v1/public/nft/product-list\", {\n      \"headers\": {\n        \"accept\": \"*/*\",\n        \"accept-language\": \"it-IT,it;q=0.9,en-US;q=0.8,en;q=0.7\",\n        \"clienttype\": \"web\",\n        \"content-type\": \"application/json\",\n        \"lang\": \"en\",\n        \"sec-fetch-dest\": \"empty\",\n        \"sec-fetch-mode\": \"cors\",\n        \"sec-fetch-site\": \"same-origin\",\n      },\n      \"referrer\": \"https://www.binance.com/en/nft/market\",\n      \"referrerPolicy\": \"origin-when-cross-origin\",\n      \"body\": \"{\\\"category\\\":0,\\\"keyword\\\":\\\"Flamingarlla Flamingos (Unique)\\\",\\\"orderBy\\\":\\\"list_time\\\",\\\"orderType\\\":-1,\\\"page\\\":1,\\\"rows\\\":100}\",\n      \"method\": \"POST\",\n      \"mode\": \"cors\"\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.data.rows\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n\n    /*  this.setState(prevState => ({\n        ...prevState,\n        items : {\n          ...prevState.items,\n          coverUrl : \"https://www.binance.com/\"\n        }\n    }))\n    console.log(this.state); */\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n\n    const rows = items.map((row) => {\n      const { productId, ...rest } = row;\n      return { id: productId, ...rest };\n    });\n     \n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div style={{ height: 1000 , width: \"100%\" }}>\n          <DataGrid\n            rows={rows}\n            columns={columns}\n            id=\"productId\" \n            pageSize={100}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport { App };"]},"metadata":{},"sourceType":"module"}