{"ast":null,"code":"var _jsxFileName = \"/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"id\",\n  type: \"number\",\n  headerName: \"ID\",\n  width: 100,\n  editable: false\n}, {\n  field: \"title\",\n  headerName: \"Name\",\n  type: \"number\",\n  width: 250,\n  editable: false\n}, {\n  field: \"amount\",\n  type: \"number\",\n  headerName: \"Prize\",\n  width: 150,\n  sort: \"asc\",\n  editable: false\n}, {\n  field: \"currency\",\n  headerName: \"Coin\",\n  width: 150,\n  editable: false\n}, {\n  field: \"tradeType\",\n  headerName: \"Asta\",\n  type: \"number\",\n  width: 150,\n  editable: false\n}];\nconst [sortModel, setSortModel] = React.useState([{\n  field: 'amount',\n  sort: 'asc'\n}]);\n\nclass App extends React.Component {\n  render() {\n    console.log(this.props);\n    const rows = this.props.data.items.map(row => {\n      const {\n        productId,\n        ...rest\n      } = row;\n      return {\n        id: productId,\n        ...rest\n      };\n    });\n\n    if (this.props.data.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.props.data.error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }, this);\n    } else if (!this.props.data.isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 1000,\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns,\n          sortModel: sortModel,\n          onSortModelChange: model => setSortModel(model),\n          id: \"productId\",\n          pageSize: 100,\n          density: \"compact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n}\n\nexport { App };","map":{"version":3,"sources":["/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js"],"names":["React","DataGrid","columns","field","type","headerName","width","editable","sort","sortModel","setSortModel","useState","App","Component","render","console","log","props","rows","data","items","map","row","productId","rest","id","error","message","isLoaded","height","model"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,UAAU,EAAE,IAHd;AAIEC,EAAAA,KAAK,EAAE,GAJT;AAKEC,EAAAA,QAAQ,EAAE;AALZ,CADc,EAQd;AACEJ,EAAAA,KAAK,EAAE,OADT;AAEEE,EAAAA,UAAU,EAAE,MAFd;AAGED,EAAAA,IAAI,EAAE,QAHR;AAIEE,EAAAA,KAAK,EAAE,GAJT;AAKEC,EAAAA,QAAQ,EAAE;AALZ,CARc,EAed;AACEJ,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,UAAU,EAAE,OAHd;AAIEC,EAAAA,KAAK,EAAE,GAJT;AAKEE,EAAAA,IAAI,EAAE,KALR;AAMED,EAAAA,QAAQ,EAAE;AANZ,CAfc,EAuBd;AACEJ,EAAAA,KAAK,EAAE,UADT;AAEEE,EAAAA,UAAU,EAAE,MAFd;AAGEC,EAAAA,KAAK,EAAE,GAHT;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAvBc,EA6Bd;AACEJ,EAAAA,KAAK,EAAE,WADT;AAEEE,EAAAA,UAAU,EAAE,MAFd;AAGED,EAAAA,IAAI,EAAE,QAHR;AAIEE,EAAAA,KAAK,EAAE,GAJT;AAKEC,EAAAA,QAAQ,EAAE;AALZ,CA7Bc,CAAhB;AAsCA,MAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BV,KAAK,CAACW,QAAN,CAAe,CAC/C;AACER,EAAAA,KAAK,EAAE,QADT;AAEEK,EAAAA,IAAI,EAAE;AAFR,CAD+C,CAAf,CAAlC;;AAOE,MAAMI,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AAEhCC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,UAAMC,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA2BC,GAAD,IAAS;AAC9C,YAAM;AAAEC,QAAAA,SAAF;AAAa,WAAGC;AAAhB,UAAyBF,GAA/B;AACA,aAAO;AAAEG,QAAAA,EAAE,EAAEF,SAAN;AAAiB,WAAGC;AAApB,OAAP;AACD,KAHY,CAAb;;AAKA,QAAI,KAAKP,KAAL,CAAWE,IAAX,CAAgBO,KAApB,EAA2B;AACzB,0BAAO;AAAA,8BAAa,KAAKT,KAAL,CAAWE,IAAX,CAAgBO,KAAhB,CAAsBC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,CAAC,KAAKV,KAAL,CAAWE,IAAX,CAAgBS,QAArB,EAA+B;AACpC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,IAAV;AAAgBvB,UAAAA,KAAK,EAAE;AAAvB,SAAZ;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,IAAI,EAAEY,IADR;AAEE,UAAA,OAAO,EAAEhB,OAFX;AAGE,UAAA,SAAS,EAAEO,SAHb;AAIE,UAAA,iBAAiB,EAAGqB,KAAD,IAAWpB,YAAY,CAACoB,KAAD,CAJ5C;AAKE,UAAA,EAAE,EAAC,WALL;AAME,UAAA,QAAQ,EAAE,GANZ;AAOE,UAAA,OAAO,EAAC;AAPV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAaD;AACF;;AA5B+B;;AAgCpC,SAASlB,GAAT","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst columns = [\n  {\n    field: \"id\",\n    type: \"number\",\n    headerName: \"ID\",\n    width: 100,\n    editable: false\n  },\n  {\n    field: \"title\",\n    headerName: \"Name\",\n    type: \"number\",\n    width: 250,\n    editable: false\n  },\n  {\n    field: \"amount\",\n    type: \"number\",\n    headerName: \"Prize\",\n    width: 150,\n    sort: \"asc\",\n    editable: false\n  },\n  {\n    field: \"currency\",\n    headerName: \"Coin\",\n    width: 150,\n    editable: false\n  },\n  {\n    field: \"tradeType\",\n    headerName: \"Asta\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }\n];\n\nconst [sortModel, setSortModel] = React.useState([\n  {\n    field: 'amount',\n    sort: 'asc',\n  },\n]);\n\n  class App extends React.Component {\n\n    render() {\n      console.log(this.props)\n      const rows = this.props.data.items.map((row) => {\n        const { productId, ...rest } = row;\n        return { id: productId, ...rest };\n      });\n\n      if (this.props.data.error) {\n        return <div>Error: {this.props.data.error.message}</div>;\n      } else if (!this.props.data.isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div style={{ height: 1000, width: \"100%\" }}>\n            <DataGrid\n              rows={rows}\n              columns={columns}\n              sortModel={sortModel}\n              onSortModelChange={(model) => setSortModel(model)}\n              id=\"productId\"\n              pageSize={100}\n              density=\"compact\"\n            />\n          </div>\n        );\n      }\n    }\n  }\n\n\nexport { App };"]},"metadata":{},"sourceType":"module"}