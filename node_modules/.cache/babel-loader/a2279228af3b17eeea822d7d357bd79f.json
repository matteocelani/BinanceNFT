{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport deepmerge from 'deepmerge'; // < 1kb payload overhead when lodash/merge is > 3kb.\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nvar caseAllCaps = {\n  textTransform: 'uppercase'\n};\nvar defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\n\nexport default function createTypography(palette, typography) {\n  var _ref = typeof typography === 'function' ? typography(palette) : typography,\n      _ref$fontFamily = _ref.fontFamily,\n      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,\n      _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,\n      _ref$fontWeightLight = _ref.fontWeightLight,\n      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,\n      _ref$fontWeightRegula = _ref.fontWeightRegular,\n      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,\n      _ref$fontWeightMedium = _ref.fontWeightMedium,\n      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,\n      _ref$htmlFontSize = _ref.htmlFontSize,\n      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,\n      allVariants = _ref.allVariants,\n      other = _objectWithoutProperties(_ref, [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"htmlFontSize\", \"allVariants\"]);\n\n  var coef = fontSize / 14;\n\n  var pxToRem = function pxToRem(size) {\n    return \"\".concat(size / htmlFontSize * coef, \"rem\");\n  };\n\n  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {\n    return _extends({\n      // color: palette.text.primary,\n      fontFamily: fontFamily,\n      fontWeight: fontWeight,\n      fontSize: pxToRem(size),\n      // Unitless following http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n      lineHeight: lineHeight\n    }, fontFamily === defaultFontFamily ? {\n      letterSpacing: \"\".concat(round(letterSpacing / size), \"em\")\n    } : {}, casing, allVariants);\n  };\n\n  var variants = {\n    h1: buildVariant(fontWeightLight, 96, 1, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.04, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.17, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.33, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)\n  };\n  return deepmerge(_extends({\n    htmlFontSize: htmlFontSize,\n    pxToRem: pxToRem,\n    round: round,\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fontWeightLight: fontWeightLight,\n    fontWeightRegular: fontWeightRegular,\n    fontWeightMedium: fontWeightMedium\n  }, variants), other, {\n    clone: false // No need to clone deep\n\n  });\n}","map":{"version":3,"sources":["/Users/matteocelani/Desktop/NFT/ordern-nft/node_modules/@material-ui/core/esm/styles/createTypography.js"],"names":["_extends","_objectWithoutProperties","deepmerge","round","value","Math","caseAllCaps","textTransform","defaultFontFamily","createTypography","palette","typography","_ref","_ref$fontFamily","fontFamily","_ref$fontSize","fontSize","_ref$fontWeightLight","fontWeightLight","_ref$fontWeightRegula","fontWeightRegular","_ref$fontWeightMedium","fontWeightMedium","_ref$htmlFontSize","htmlFontSize","allVariants","other","coef","pxToRem","size","concat","buildVariant","fontWeight","lineHeight","letterSpacing","casing","variants","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","clone"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport deepmerge from 'deepmerge'; // < 1kb payload overhead when lodash/merge is > 3kb.\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nvar caseAllCaps = {\n  textTransform: 'uppercase'\n};\nvar defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\n\nexport default function createTypography(palette, typography) {\n  var _ref = typeof typography === 'function' ? typography(palette) : typography,\n      _ref$fontFamily = _ref.fontFamily,\n      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,\n      _ref$fontSize = _ref.fontSize,\n      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,\n      _ref$fontWeightLight = _ref.fontWeightLight,\n      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,\n      _ref$fontWeightRegula = _ref.fontWeightRegular,\n      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,\n      _ref$fontWeightMedium = _ref.fontWeightMedium,\n      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,\n      _ref$htmlFontSize = _ref.htmlFontSize,\n      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,\n      allVariants = _ref.allVariants,\n      other = _objectWithoutProperties(_ref, [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"htmlFontSize\", \"allVariants\"]);\n\n  var coef = fontSize / 14;\n\n  var pxToRem = function pxToRem(size) {\n    return \"\".concat(size / htmlFontSize * coef, \"rem\");\n  };\n\n  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {\n    return _extends({\n      // color: palette.text.primary,\n      fontFamily: fontFamily,\n      fontWeight: fontWeight,\n      fontSize: pxToRem(size),\n      // Unitless following http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n      lineHeight: lineHeight\n    }, fontFamily === defaultFontFamily ? {\n      letterSpacing: \"\".concat(round(letterSpacing / size), \"em\")\n    } : {}, casing, allVariants);\n  };\n\n  var variants = {\n    h1: buildVariant(fontWeightLight, 96, 1, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.04, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.17, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.33, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)\n  };\n  return deepmerge(_extends({\n    htmlFontSize: htmlFontSize,\n    pxToRem: pxToRem,\n    round: round,\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fontWeightLight: fontWeightLight,\n    fontWeightRegular: fontWeightRegular,\n    fontWeightMedium: fontWeightMedium\n  }, variants), other, {\n    clone: false // No need to clone deep\n\n  });\n}"]},"metadata":{},"sourceType":"module"}