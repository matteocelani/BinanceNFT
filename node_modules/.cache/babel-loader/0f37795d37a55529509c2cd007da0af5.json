{"ast":null,"code":"var _jsxFileName = \"/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Link from '@material-ui/core/Link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App(data) {\n  const columns = [{\n    field: \"id\",\n    type: \"number\",\n    headerName: \"ID\",\n    width: 100,\n    editable: false\n  }, {\n    field: \"title\",\n    headerName: \"Name\",\n    width: 250,\n    editable: false\n  }, {\n    field: \"amount\",\n    headerName: \"Price\",\n    type: \"number\",\n    width: 115,\n    editable: false\n  }, {\n    field: \"currency\",\n    headerName: \"Coin\",\n    width: 120,\n    editable: false\n  }, {\n    field: \"usd\",\n    headerName: \"Price USD\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }, {\n    field: \"tradeType\",\n    headerName: \"Trade Type\",\n    type: \"number\",\n    width: 150,\n    editable: false\n  }, {\n    field: \"endTime\",\n    headerName: \"End Time\",\n    type: \"number\",\n    width: 200,\n    editable: false\n  }, {\n    field: \"url\",\n    headerName: \"URL\",\n    width: 300,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Link, {\n      target: \"_blank\",\n      href: params.value,\n      children: params.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this),\n    editable: false\n  }];\n\n  function convertMiliseconds(miliseconds) {\n    var days, hours, minutes, seconds, total_hours, total_minutes, total_seconds;\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\n    total_hours = parseInt(Math.floor(total_minutes / 60));\n    days = parseInt(Math.floor(total_hours / 24));\n    seconds = parseInt(total_seconds % 60);\n    minutes = parseInt(total_minutes % 60);\n    hours = parseInt(total_hours % 24);\n    return days + \" : \" + hours + \" : \" + minutes + \" : \" + seconds;\n  }\n\n  ;\n\n  if (data.data.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", data.data.error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  } else if (!data.data.isLoaded && !data.data.coinsLoad) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  } else {\n    const rows = data.data.items.map(row => {\n      const {\n        productId,\n        ...rest\n      } = row;\n      return {\n        id: productId,\n        ...rest\n      };\n    });\n    const coins = [data.data.coins.data];\n    const finalRows = [];\n\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 1) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        }\n      } else {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        } else if (rows[i].currency === \"ETH\") {\n          finalRows[i] = {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].ethereum.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\" + rows[i].id + \"&isOpen=true&isProduct=1\"\n          };\n        }\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 850,\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: finalRows,\n        columns: columns,\n        rowsPerPageOptions: [100, 250, 500],\n        pageSize: 100,\n        density: \"compact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  }\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/matteocelani/Documents/FenneMic/GitHub/BinanceNFT/src/App.js"],"names":["React","DataGrid","Link","App","data","columns","field","type","headerName","width","editable","renderCell","params","value","convertMiliseconds","miliseconds","days","hours","minutes","seconds","total_hours","total_minutes","total_seconds","parseInt","Math","floor","error","message","isLoaded","coinsLoad","rows","items","map","row","productId","rest","id","coins","finalRows","i","length","tradeType","currency","title","usd","amount","endTime","setEndTime","setStartTime","url","binancecoin","ethereum","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Link from '@material-ui/core/Link';\n\nexport default function App(data) {\n\n  const columns = [\n    {\n      field: \"id\",\n      type: \"number\",\n      headerName: \"ID\",\n      width: 100,\n      editable: false\n    },\n    {\n      field: \"title\",\n      headerName: \"Name\",\n      width: 250,\n      editable: false\n    },\n    {\n      field: \"amount\",\n      headerName: \"Price\",\n      type: \"number\",\n      width: 115,\n      editable: false\n    },\n    {\n      field: \"currency\",\n      headerName: \"Coin\",\n      width: 120,\n      editable: false\n    },\n    {\n      field: \"usd\",\n      headerName: \"Price USD\",\n      type: \"number\",\n      width: 150,\n      editable: false\n    },\n    {\n      field: \"tradeType\",\n      headerName: \"Trade Type\",\n      type: \"number\",\n      width: 150,\n      editable: false\n    },\n    {\n      field: \"endTime\",\n      headerName: \"End Time\",\n      type: \"number\",\n      width: 200,\n      editable: false\n    },\n    {\n      field: \"url\",\n      headerName: \"URL\",\n      width: 300,\n      renderCell: (params) => (\n        <Link target=\"_blank\" href={params.value}>{params.value}</Link>),\n      editable: false\n    }\n  ];\n\n  function convertMiliseconds(miliseconds) {\n    var days, hours, minutes, seconds, total_hours, total_minutes, total_seconds;\n    \n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\n    total_hours = parseInt(Math.floor(total_minutes / 60));\n    days = parseInt(Math.floor(total_hours / 24));\n  \n    seconds = parseInt(total_seconds % 60);\n    minutes = parseInt(total_minutes % 60);\n    hours = parseInt(total_hours % 24); \n    \n    return days + \" : \" + hours + \" : \" + minutes + \" : \" + seconds;\n  };\n\n  if (data.data.error) {\n    return <div>Error: {data.data.error.message}</div>;\n  } else if (!data.data.isLoaded && !data.data.coinsLoad) {\n    return <div>Loading...</div>;\n  } else {\n    const rows = data.data.items.map((row) => {\n      const { productId, ...rest } = row;\n      return { id: productId, ...rest };\n    });\n    const coins = [data.data.coins.data]\n    const finalRows = [];\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].tradeType === 1) {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] =   \n        {\n          id: rows[i].id,\n          title: rows[i].title,\n          usd:rows[i].amount,\n          amount: rows[i].amount,\n          currency: rows[i].currency,\n          tradeType: \"Auction\",\n          endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n          url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n        }\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] =   \n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Auction\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n          }\n          } else if (rows[i].currency === \"ETH\") {\n            finalRows[i] =   \n            {\n              id: rows[i].id,\n              title: rows[i].title,\n              usd: coins[0].ethereum.usd * rows[i].amount,\n              amount: rows[i].amount,\n              currency: rows[i].currency,\n              tradeType: \"Auction\",\n              endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n              url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n            }\n          }\n      } else {\n        if (rows[i].currency === \"BUSD\") {\n          finalRows[i] =   \n        {\n          id: rows[i].id,\n          title: rows[i].title,\n          usd:rows[i].amount,\n          amount: rows[i].amount,\n          currency: rows[i].currency,\n          tradeType: \"Buy Now\",\n          endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n          url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n        }\n        } else if (rows[i].currency === \"BNB\") {\n          finalRows[i] =   \n          {\n            id: rows[i].id,\n            title: rows[i].title,\n            usd: coins[0].binancecoin.usd * rows[i].amount,\n            amount: rows[i].amount,\n            currency: rows[i].currency,\n            tradeType: \"Buy Now\",\n            endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n            url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n          }\n          } else if (rows[i].currency === \"ETH\") {\n            finalRows[i] =   \n            {\n              id: rows[i].id,\n              title: rows[i].title,\n              usd: coins[0].ethereum.usd * rows[i].amount,\n              amount: rows[i].amount,\n              currency: rows[i].currency,\n              tradeType: \"Buy Now\",\n              endTime: convertMiliseconds(rows[i].setEndTime - rows[i].setStartTime),\n              url: \"https://www.binance.com/en/nft/goods/blindBox/detail?productId=\"+rows[i].id+\"&isOpen=true&isProduct=1\"\n            }\n          }\n      }\n    } \n    return (\n      <div style={{ height: 850, width: \"100%\" }}>\n        <DataGrid\n          rows={finalRows}\n          columns={columns}\n          rowsPerPageOptions={[100, 250, 500]}\n          pageSize={100}\n          density=\"compact\"\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}